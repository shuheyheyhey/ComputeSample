#pragma kernel Main

#include "../Utils/ComputeShaderHelper.hlsl"

// 入力される頂点情報
struct SourceVertex
{
    float3 positionOS;
    float2 uv;
};

// 描画先の頂点情報
struct DrawVertex
{
    float3 positionWS;
    float2 uv;
};

// 三角形の情報
struct DrawTriangle
{
    float3 normalWS;
    DrawVertex vertices[3];
};

// C#から情報を渡すための Buffer を定義
// メッシュから入力される頂点情報
StructuredBuffer<SourceVertex> _SourceVertices;
// メッシュの triangles の情報　
StructuredBuffer<int> _SourceTriangles;
// 入力された情報から得た出力する三角形の情報
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;

// 出力される三角形の数(C# でメッシュから計算する)
int _NumSourceTriangles;
// Unity のWorld座標
float4x4 _LocalToWorld;

float _AudioLevel;

float _Time;

// 与えられた頂点情報を Unity の World 座標に変換する
DrawVertex TransformToWorldSpace(SourceVertex v)
{
    DrawVertex o;
    o.positionWS = mul(_LocalToWorld, float4(v.positionOS, 1)).xyz;
    o.uv = v.uv;
    return o;
}

// 与えられた頂点情報から三角形の情報として出力バッファーに適用
void SetupAndOutputTriangle(DrawVertex a, DrawVertex b, DrawVertex c)
{
    float3 normalWS = GetNormalFromTriangle(a.positionWS, b.positionWS, c.positionWS);

    DrawTriangle tri;
    tri.normalWS = normalWS;
    tri.vertices[0] = a;
    tri.vertices[1] = b;
    tri.vertices[2] = c;

    _DrawTriangles.Append(tri);
}

[numthreads(128, 1, 1)]
void Main(uint3 id: SV_DispatchThreadID)
{
    if ((int)id.x >= _NumSourceTriangles) { return; }

    int triStart = id.x * 3;
    DrawVertex inputs[3];
    inputs[0] = TransformToWorldSpace(_SourceVertices[_SourceTriangles[triStart]]);
    inputs[1] = TransformToWorldSpace(_SourceVertices[_SourceTriangles[triStart + 1]]);
    inputs[2] = TransformToWorldSpace(_SourceVertices[_SourceTriangles[triStart + 2]]);
    
    float3 triNormal = GetNormalFromTriangle(inputs[0].positionWS, inputs[1].positionWS, inputs[2].positionWS) * RandomPoint(Random(id.x, _AudioLevel)) *  (_AudioLevel * 100 * (Random(id.x + _Time, _Time)));

    DrawVertex outputs[3];
    outputs[0] = inputs[0];
    outputs[0].positionWS = outputs[0].positionWS + triNormal;
    outputs[1] = inputs[1];
    outputs[1].positionWS = outputs[1].positionWS + triNormal;
    outputs[2] = inputs[2];
    outputs[2].positionWS = outputs[2].positionWS + triNormal;
    
    SetupAndOutputTriangle(inputs[0], outputs[0], outputs[2]);
    SetupAndOutputTriangle(inputs[0], inputs[2], outputs[2]);
    SetupAndOutputTriangle(inputs[1], outputs[1], outputs[0]);
    SetupAndOutputTriangle(inputs[1], inputs[0], outputs[0]);
    SetupAndOutputTriangle(inputs[2], outputs[2], outputs[1]);
    SetupAndOutputTriangle(inputs[2], inputs[1], outputs[1]);
    SetupAndOutputTriangle(outputs[0], outputs[1], outputs[2]);
}
